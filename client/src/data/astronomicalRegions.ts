/**
 * Datos est√°ticos de regiones astron√≥micas para usar cuando el backend no est√© disponible
 * Basado en REGIONES_ASTRONOMICAS.md
 */

export interface AstronomicalRegion {
  name: string;
  icon: string;
  description: string;
  raMin: number;
  raMax: number;
  decMin: number;
  decMax: number;
  priority: number; // Para regiones que se superponen, mayor prioridad = m√°s espec√≠fico
}

export const ASTRONOMICAL_REGIONS: AstronomicalRegion[] = [
  // Regiones de alta prioridad (m√°s espec√≠ficas)
  {
    name: "Complejo de Ori√≥n",
    icon: "üåü",
    description: "Gran regi√≥n de formaci√≥n estelar (M42, M43, Cabeza de Caballo)",
    raMin: 75, raMax: 95, decMin: -15, decMax: 15,
    priority: 10
  },
  {
    name: "Centro Gal√°ctico",
    icon: "‚ö´",
    description: "N√∫cleo de la V√≠a L√°ctea con Sagitario A*",
    raMin: 260, raMax: 275, decMin: -35, decMax: -25,
    priority: 10
  },
  {
    name: "C√∫mulo de las Pl√©yades",
    icon: "‚ú®",
    description: "C√∫mulo abierto joven (M45) en Tauro",
    raMin: 55, raMax: 58, decMin: 23, decMax: 25,
    priority: 10
  },
  {
    name: "Galaxia de Andr√≥meda",
    icon: "üåå",
    description: "Galaxia espiral m√°s cercana (M31) - 2.5 millones a√±os luz",
    raMin: 9, raMax: 12, decMin: 40, decMax: 43,
    priority: 10
  },
  {
    name: "Cygnus X",
    icon: "üåü",
    description: "Regi√≥n masiva de formaci√≥n estelar en la constelaci√≥n del Cisne",
    raMin: 305, raMax: 315, decMin: 38, decMax: 45,
    priority: 9
  },
  {
    name: "Nebulosa de Carina",
    icon: "‚òÅÔ∏è",
    description: "Regi√≥n de formaci√≥n estelar con Eta Carinae",
    raMin: 155, raMax: 170, decMin: -65, decMax: -55,
    priority: 9
  },
  {
    name: "C√∫mulo de las H√≠ades",
    icon: "‚≠ê",
    description: "C√∫mulo abierto m√°s cercano en Tauro",
    raMin: 64, raMax: 70, decMin: 14, decMax: 18,
    priority: 9
  },
  
  // Regiones de prioridad media (brazos espirales)
  {
    name: "Brazo de Sagitario",
    icon: "üåÄ",
    description: "Brazo espiral interior de la V√≠a L√°ctea",
    raMin: 240, raMax: 290, decMin: -45, decMax: -10,
    priority: 5
  },
  {
    name: "Brazo de Perseo",
    icon: "üåÄ", 
    description: "Brazo espiral exterior con regiones HII",
    raMin: 30, raMax: 90, decMin: 30, decMax: 60,
    priority: 5
  },
  {
    name: "Brazo de Ori√≥n",
    icon: "üåÄ",
    description: "Espol√≥n local donde se encuentra el Sistema Solar",
    raMin: 60, raMax: 120, decMin: -30, decMax: 30,
    priority: 4
  },
  
  // Regiones generales del plano gal√°ctico
  {
    name: "Plano Gal√°ctico Norte",
    icon: "üåå",
    description: "Regi√≥n rica en estrellas y polvo interestelar",
    raMin: 0, raMax: 360, decMin: 10, decMax: 45,
    priority: 2
  },
  {
    name: "Plano Gal√°ctico Sur", 
    icon: "üåå",
    description: "Regi√≥n del plano gal√°ctico hacia el hemisferio sur",
    raMin: 0, raMax: 360, decMin: -45, decMax: -10,
    priority: 2
  },
  {
    name: "Polo Norte Gal√°ctico",
    icon: "üß≠",
    description: "Regi√≥n hacia el polo norte de la galaxia, baja densidad estelar",
    raMin: 0, raMax: 360, decMin: 45, decMax: 90,
    priority: 3
  },
  {
    name: "Polo Sur Gal√°ctico",
    icon: "üß≠", 
    description: "Regi√≥n hacia el polo sur de la galaxia, vista a galaxias externas",
    raMin: 0, raMax: 360, decMin: -90, decMax: -45,
    priority: 3
  },
  
  // Regi√≥n por defecto (menor prioridad)
  {
    name: "V√≠a L√°ctea",
    icon: "üåå",
    description: "Nuestra galaxia espiral con 200-400 mil millones de estrellas",
    raMin: 0, raMax: 360, decMin: -90, decMax: 90,
    priority: 1
  }
];

/**
 * Encuentra la regi√≥n astron√≥mica m√°s espec√≠fica para las coordenadas dadas
 */
export function findAstronomicalRegion(ra: number, dec: number): AstronomicalRegion | null {
  // Normalizar RA a rango [0, 360)
  let normalizedRA = ra % 360;
  if (normalizedRA < 0) {
    normalizedRA += 360;
  }
  
  // Encontrar todas las regiones que contienen este punto
  const matchingRegions = ASTRONOMICAL_REGIONS.filter(region => {
    const inRA = normalizedRA >= region.raMin && normalizedRA <= region.raMax;
    const inDec = dec >= region.decMin && dec <= region.decMax;
    return inRA && inDec;
  });
  
  // Devolver la regi√≥n con mayor prioridad
  if (matchingRegions.length === 0) {
    return null;
  }
  
  return matchingRegions.reduce((best, current) => 
    current.priority > best.priority ? current : best
  );
}
